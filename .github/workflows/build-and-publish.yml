name: Build and Publish Container

# Release-driven container builds: Only build and publish containers
# when releases are created, ensuring only stable versions are distributed

on:
  # Only build containers on releases and manual dispatch
  release:
    types: [ published, prereleased ]
  # Build on git tags (for manual tag pushes)
  push:
    tags: [ 'v*' ]
  # Allow manual triggering
  workflow_dispatch:
  # Build for PRs but don't publish
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag with version for releases/tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag for published releases
            type=raw,value=latest,enable=${{ github.event_name == 'release' && github.event.action == 'published' }}
            # PR tags for pull requests (but won't be published)
            type=ref,event=pr
          labels: |
            org.opencontainers.image.title=CBZify
            org.opencontainers.image.description=Comic converter web interface - PDF/EPUB to CBZ
            org.opencontainers.image.vendor=CBZify
            org.opencontainers.image.licenses=AGPL-3.0

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'table'
          output: 'trivy-results.txt'

      - name: Display Trivy scan results
        if: github.event_name != 'pull_request'
        run: |
          echo "## Trivy Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat trivy-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request' && vars.SNYK_TOKEN != ''
    permissions:
      contents: read
      packages: read

    steps:
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          args: --severity-threshold=high --file=docker/Dockerfile --json
        continue-on-error: true

      - name: Display Snyk scan results
        if: always()
        run: |
          echo "## Snyk Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "Snyk scan completed. Check job logs for detailed results." >> $GITHUB_STEP_SUMMARY